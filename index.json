[{"content":"AOP（Aspect Oriented Programming）意即面向切面编程，是通过预编译方式和运行期动态代理的方式来实现程序功能统一维护的技术。\n基本术语解释  切面（Aspect）：泛指切入点和通知等的集合，即对主业务逻辑的增强 连接点（Join Point）：指一些程序执行过程的特殊位置，例如方法的运行或者异常的处理，在 Spring 中，它总是指某个程序的执行。 通知（Advice）：切面在特定连接点采取的动作，存在 around、before 和 after 等类型的通知。 切入点（Point Cut）：实际增强的位置，指一些程序中 JoinPoint 和 Advice 等作用的位置 织入（Weave）：指对主业务逻辑的增强过程 目标对象（Target）：切面增强的目标 顾问（Advisor）：切面的另一种实现，可将通知以复杂方式织入目标对象，是将 advice 包装为复杂切面的装配器 代理（Proxy）：切面增强后的对象  JoinPoint and PointCut  A Joinpoint is a point in the control flow of a program where the control flow can arrive via two different paths(IMO : that\u0026rsquo;s why call joint).\nAdvice describes a class of functions which modify other functions.\nA Pointcut is a matching Pattern of Joinpoint i.e. set of join points.\n 从静态代理到动态代理 通过代理模式，客户可以避免直接和服务交互，而是通过实现同样接口的代理类来进行交互。\nReference","permalink":"https://zhiwenliang.github.io/posts/2021/10/aop-conslusion/","summary":"\u003cp\u003eAOP（Aspect Oriented Programming）意即面向切面编程，是通过预编译方式和运行期动态代理的方式来实现程序功能统一维护的技术。\u003c/p\u003e","title":"AOP 学习总结"},{"content":"在分布式系统中，CAP 和 BASE 是其中重要的基础理论。\nCAP 理论：  C: Consistency（一致性） A: Availability（可用性） P: Partition tolerance（分区容错性）  首先说 Partition tolerance，在多个节点组成的分布式系统中，节点之间的网络之间正常情况下是互相连通的，但是意外发生时，节点之间不能连通，系统内就变成了不同的分区，比如北京的和上海之间的网络故障就会导致分区的产生，如果数据只存在一个分区的节点上，那么就会导致这些数据对其他分区不可见，此时的系统是不具有分区容错性的。\n为了提高分区的容错性，我们可以把节点上的数据复制到多个分区的多个节点上，这样即使意外发生，上面的数据仍然可以访问，即满足了分区容错性。\n从不同节点访问同样的数据时，可能存在以下问题：\n 不同节点上数据不一致（不满足 Consistency） 不能及时返回数据（不满足 Availability）  那么如何解决呢？\n 为了满足 Consistency，向其他节点复制数据时，等待所有节点全部写操作完成后才允许读操作，但是这样在写操作期间应用无法从这些节点获取数据，就牺牲了 Availability 为了满足 Availability，向其他节点复制数据时，不用等所有节点全部操作完成就允许访问数据，但这样就会牺牲 Consistency ，获取的数据可能不一致  综上，在分布式系统中，满足分区容错性的前提下，可用性和一致性只能满足一个。\nBASE 理论 在实际生产实践中，基于 CAP 理论，延伸出了 BASE 理论。\n Basically Available（基本可用） Soft State（软状态） Eventually Consistent（最终一致性）  其本质上是通过牺牲强一致性，允许数据存在一个同步过程中的中间状态\nReference  https://www.ruanyifeng.com/blog/2018/07/cap.html https://www.cnblogs.com/duanxz/p/5229352.html ","permalink":"https://zhiwenliang.github.io/posts/2021/09/cap-and-base/","summary":"\u003cp\u003e在分布式系统中，CAP 和 BASE 是其中重要的基础理论。\u003c/p\u003e","title":"CAP 和 BASE 理论"},{"content":"这是我搭建以及改造博客的过程记录。\n搭建博客 主要参考 Hexo 官方文档 即可\nhexo init \u0026lt;the directory of your blog\u0026gt; cd \u0026lt;blog directory\u0026gt; npm install 至此一个简单的 hexo 博客的本地环境就已经搭建完成，输入 hexo s ，即可在 http://localhost:4000 上看到网站的预览。\n接下来如果需要其他功能，就需要修改相关的配置文件和安装插件。虽然有很多更炫酷的功能，但考虑到折腾越少，麻烦越少，并且方便升级和重建，而且最终写博客才是重点，最终我选择 hexo-deployer-git 、hexo-generator-feed 和 hexo-generator-searchdb 这三个插件，主题用 NexT， 并将环境配置的命令写入脚本，方便以后的使用。\n搭建多终端博客环境 首先搞清楚本地生成博客并推送到 GitHub 的大致过程\n  本地输入 hexo g 会生成 public 文件夹，输入 hexo clean 会删除此文件夹，此文件夹下内容就是网站所需的源代码，也是我们 push 到 GitHub 仓库的内容。\n  使用 hexo d 会生成 .deploy_git 文件夹，打开发现这是一个 Git 仓库，主体内容和 public 文件夹的内容相同，应该是通过 hexo-deployer-git 插件生成，用于将仓库内容 push 到 GitHub 上远程仓库的 master 分支上。\n  再看下 GitHub 上的远程仓库，master 分支上存储生成的静态网站代码会自动部署到 GitHub Pages 上，猜测其他分支上的内容不会影响 blog 网站的内容。查看 GitHub 官方文档，并通过测试发现确实如此。\n  如此一来多终端编辑 hexo 博客的实现思路就很清晰了：在 GitHub 上的仓库新建分支，在此分支存储用于生成博客的源文件，在其他终端上 clone 对应仓库，切换到刚刚新建的分支运行环境配置脚本即可以开始编辑博客。\ngit init git remote add origin \u0026lt;the repository of your blog\u0026gt; git add -A git commit -m \u0026#34;Source files of the blog\u0026#34; git checkout -b hexo git push origin hexo   至此，多终端编辑博客的环境便搭建完成。\n虽然最终折腾成功，但是相比 WordPress 部署后在任何地方都可以打开网页后台编辑，还是感觉很不方便，简单查了下，觉的 Hexo 经过一些配置后应该也可以实现这个功能，但是目前重点是先开始坚持写博客，所以还是少折腾，等以后再进行优化吧。\n私人仓库存储博客运行环境 最新写的东西都是断断续续的，有的草稿不太想发到网上，用了 hexo new draft 突然发现 GitHub Page 对应仓库是公开状态，草稿也是能看到的，想起来 GitHub 可以新建私人仓库，索性将原来仓库的 hexo 分支删除，新建了一个私人仓库用于存储博客写作环境相关源文件，这样的对于隐私的控制性明显更强。操作方法也很简单，\n  在 GitHub 上新建一个私人仓库。\n  回到本地 git clone \u0026lt;repo_address\u0026gt; \u0026lt;local_directory_name\u0026gt;，将原博客文件夹中除 .git 文件夹外全部 copy 到新的文件夹中。\n  在新的博客文件夹下执行以下命令：\ngit add -A git commit -m \u0026lt;commit_messsage\u0026gt; git push   迁移完成，以后每次写完博客却先不想发布时，可以先提交到这个私人仓库。\n  gitee 好像也推出了静态页面托管服务，国内访问速度可以更快点，搭建方法和 GitHub 基本一致，但是如果不是 pro 用户，不能自动更新仓库里面的内容到页面上，需要每次手动更新。\n  添加 PlantUML 插件   安装插件：在博客目录下执行以下命令\nnpm install hexo-tag-plantuml --save   然后在 _config.yml 文件中添加以下内容\ntag_plantuml: type: static # static 代表下载 svg 代码到生成的html 中，dynamic 代表从 http://www.plantuml.com/plantuml/svg 动态生成   在 markdown 文件中编写时按照此格式\n{% plantuml %} Bob-\u0026gt;Alice : hello {% endplantuml %}   添加 mermaid 插件 mermaid 插件相较于 PlantUML 插件更适合 markdown\n 直接可以在代码块中编写 在 vscode 中安装 mermaid 相应插件后可以在写作时实时预览 现在 Hexo NexT 主题添加了对应的支持，可以直接开启，原来未支持前需要手动修改部分文件实现  出于以上原因，我更换了画图的插件，通过以下步骤可以安装\n  安装插件：在博客目录下执行以下命令\nnpm install hexo-filter-mermaid-diagrams --save   然后在 _config.yml 文件中添加以下内容\n# mermaid chart mermaid: ## mermaid url https://github.com/knsv/mermaid enable: true # default true version: \u0026#34;8.8.1\u0026#34; # default v7.1.2 options: # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js startOnload: true # default true   在 markdown 文件中编写时可以直接编写到代码块中，需要定义代码格式为 mermaid\n  通过 npm 安装 NexT 主题 现在也可以通过 npm 安装 NexT 主题，这种方法方便更新，并且配置文件单独放置，方便修改。\n首先安装 hexo-theme-next 依赖\nnpm install hexo-theme-next 安装完成后，进入到博客文件夹的根目录，修改 Hexo 配置文件 _config.yml，修改主题配置为 theme: next。 如果不想使用默认配置的话，在 node_modules 目录下可以找到刚刚安装的 hexo-theme-next，将_config.yml文件拷贝过来，并重新命名为 _config.next.yml，在此可以对主题进行各种配置。 至此主题安装完成。\nReference  mermaid offical documentation hexo-filter-mermaid-diagrams ","permalink":"https://zhiwenliang.github.io/posts/2021/09/build-blog-hexo/","summary":"\u003cp\u003e这是我搭建以及改造博客的过程记录。\u003c/p\u003e","title":"使用 Hexo 创建静态博客"}]